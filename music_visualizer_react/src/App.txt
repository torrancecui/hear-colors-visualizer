import * as Tone from "tone";
import React, { useRef, useState } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import { colorNoteMapping } from "../colorNoteMapping";
import "./App.css";

function ColorSphere(props) {
  // This reference gives us direct access to the THREE.Mesh object
  const ref = useRef();
  // Return the view, these are regular Threejs elements expressed in JSX
  return (
    <mesh {...props} ref={ref} scale={props.selected ? 1.3 : 1}>
      <sphereGeometry args={[0.5, 32, 16]} />
      <meshStandardMaterial color={props.color} />
    </mesh>
  );
}

export default function App() {
  const reverb = new Tone.Reverb(6).toDestination();
  const pingPong = new Tone.PingPongDelay("8n", 0.6).connect(reverb);
  const synth = new Tone.MonoSynth().connect(pingPong);

  const [selectedNotes, setSelectedNotes] = useState([]);

  function playSynth(notes) {
    var pattern = new Tone.Pattern(function (time, note) {
      synth.triggerAttackRelease(note, 0.25);
    }, selectedNotes);
    pattern.start(0);
    Tone.Transport.start();
  }

  function stopSynth() {
    Tone.Transport.stop();
  }

  // function processClick(noteName) {
  //   console.log(noteName);
  //   setSelectedNotes((previousState) => {
  //     return { ...previousState, color: "blue" };
  //   });
  // }

  function ColorBar(props) {
    let colorBar = [];
    let index = -5.5;
    for (let note in colorNoteMapping) {
      let hexColor = colorNoteMapping[note][1];
      let noteName = colorNoteMapping[note][0];
      colorBar.push(
        <ColorSphere
          position={[index, 0, 0]}
          color={hexColor}
          // onClick={processClick(noteName)}
        ></ColorSphere>
      );
      index += 1;
    }
    return colorBar;
  }

  return (
    <div className="App">
      <Canvas>
        <ambientLight />
        <pointLight position={[10, 10, 10]} />
        <ColorBar></ColorBar>
      </Canvas>
      <button onClick={playSynth}>play</button>
      <button onClick={stopSynth}>stop</button>
    </div>
  );
}
